#!/usr/bin/python
# -*- coding: utf-8 -*-

import json
import requests


def covert():
    with open("D:\\source1104.json", encoding='utf-8') as fr:
        content = fr.read()
        datas = json.loads(content)
        print(datas)
        print(len(datas["RECORDS"]))
        count = 0
        count1 = 0
        count2 = 0
        count3 = 0
        count4 = 0
        count5 = 0
        for data in datas["RECORDS"]:
            try:
                created_at = data["created_at"]

                country = json.loads(data["content"])["expressInfoList"][0]["originateInfo"]["addressInfo"]["country"]
                province = json.loads(data["content"])["expressInfoList"][0]["originateInfo"]["addressInfo"]["province"]
                city = json.loads(data["content"])["expressInfoList"][0]["originateInfo"]["addressInfo"]["city"]
                county = json.loads(data["content"])["expressInfoList"][0]["originateInfo"]["addressInfo"]["county"]
                address = json.loads(data["content"])["expressInfoList"][0]["originateInfo"]["addressInfo"]["address"]
                originate_address = str(country + province + city + county + address)

                url = "http://api.map.baidu.com/geocoder/v2/?address={%s}&output=json&ak=jwIc3hYW05E87k5GwLv0CIeUMSFRYoy2" % originate_address
                resp = requests.get(url)
                originate_location = resp.json()['result']['location']
                originate_location_lng = resp.json()['result']['location']['lng']
                originate_location_lat = resp.json()['result']['location']['lat']
                originate_precise = resp.json()['result']['precise']
                originate_confidence = resp.json()['result']['confidence']

                country = json.loads(data["content"])["expressInfoList"][0]["destinationInfo"]["addressInfo"]["country"]
                province = json.loads(data["content"])["expressInfoList"][0]["destinationInfo"]["addressInfo"][
                    "province"]
                city = json.loads(data["content"])["expressInfoList"][0]["destinationInfo"]["addressInfo"]["city"]
                county = json.loads(data["content"])["expressInfoList"][0]["destinationInfo"]["addressInfo"]["county"]
                address = json.loads(data["content"])["expressInfoList"][0]["destinationInfo"]["addressInfo"]["address"]
                destination_address = str(country + province + city + county + address)
                url = "http://api.map.baidu.com/geocoder/v2/?address={%s}&output=json&ak=jwIc3hYW05E87k5GwLv0CIeUMSFRYoy2" % destination_address
                resp = requests.get(url)
                destination_location = resp.json()['result']['location']
                destination_location_lng = resp.json()['result']['location']['lng']
                destination_location_lat = resp.json()['result']['location']['lat']
                destination_precise = resp.json()['result']['precise']
                destination_confidence = resp.json()['result']['confidence']

                url = 'http://api.map.baidu.com/direction/v2/transit?origin=%s,%s&destination=%s,%s&ak=jwIc3hYW05E87k5GwLv0CIeUMSFRYoy2' % (
                    destination_location_lat, destination_location_lng, originate_location_lat, originate_location_lng)
                resp = requests.get(url)
                distance = resp.json()['result']['routes'][0]['distance']

                print('%s  %s  %s  %s  %s  %s %s  %s  %s %s' % (
                    created_at, originate_address, originate_location, originate_precise, originate_confidence,
                    destination_address, destination_location, destination_precise, destination_confidence,
                    distance))
                if distance <= 3000 and originate_precise == 1 and originate_confidence >= 80 and destination_precise == 1 and destination_confidence >= 80:
                    count += 1
                if distance <= 3000 and originate_precise == 1 and originate_confidence >= 70 and destination_precise == 1 and destination_confidence >= 70:
                    count1 += 1
                if distance <= 5000 and originate_precise == 1 and originate_confidence >= 80 and destination_precise == 1 and destination_confidence >= 80:
                    count2 += 1
                if distance <= 5000 and originate_precise == 1 and originate_confidence >= 70 and destination_precise == 1 and destination_confidence >= 70:
                    count3 += 1
                if distance <= 10000 and originate_precise == 1 and originate_confidence >= 70 and destination_precise == 1 and destination_confidence >= 70:
                    count4 += 1
                if distance <= 15000 and originate_precise == 1 and originate_confidence >= 70 and destination_precise == 1 and destination_confidence >= 70:
                    count5 += 1
            except Exception as exception:
                print(exception)
                pass
        print('符合条件的订单：%d' % count)


if __name__ == '__main__':
    covert()
